
#include <WiFi.h>
#include <WebServer.h>
#include <WiFiUdp.h>
#include <Preferences.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <time.h>

// OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Wi-Fi credentials
const char* ssid = "motoedge50fusion_4604";
const char* password = "12345679";

// Web server
WebServer server(80);
Preferences preferences;

// Relay pin
const int relayPin = 27;

// App state
String currentMode = "CLASS";
const String correctPassword = "*****";
String customTimes[9];
String lastBell = "";

unsigned long lastAdMillis = 0;

// Login HTML page
String loginPage = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
  <title>Login</title>
  <style>
    body {
      background: #0d0d0d;
      color: white;
      font-family: 'Segoe UI', sans-serif;
      display: flex;
      height: 100vh;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      padding: 20px;
      box-sizing: border-box;
    }
    input[type='password'], input[type='submit'] {
      padding: 12px;
      margin: 10px;
      font-size: 16px;
      width: 100%;
      max-width: 300px;
      border-radius: 6px;
      border: none;
    }
    input[type='submit'] {
      background: #1e90ff;
      color: white;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h2>Smart Bell Login</h2>
  <form action='/login' method='POST'>
    <input type='password' name='pass' placeholder='Enter Password'><br>
    <input type='submit' value='Login'>
  </form>
</body>
</html>
)rawliteral";

// Mode setup page
String generateModePage() {
  String page = "<!DOCTYPE html><html><head><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Smart Bell</title><style>";
  page += "body{background:#121212;color:white;font-family:sans-serif;padding:20px;box-sizing:border-box;}";
  page += "input,select{padding:10px;margin:8px 0;width:100%;max-width:400px;border:none;border-radius:6px;background:#2b2b2b;color:white;}";
  page += "input[type='submit']{background:#2196F3;color:white;cursor:pointer;}";
  page += "label{display:block;margin-top:10px;}";
  page += "h2{color:#03dac6;}";
  page += "</style></head><body><div><h2>Select Mode</h2>";
  page += "<form action='/setmode' method='POST'>";
  page += "<label for='mode'>Mode</label><select name='mode'>";
  page += String("<option value='CLASS' ") + (currentMode == "CLASS" ? "selected" : "") + ">CLASS</option>";
  page += String("<option value='EXAM' ") + (currentMode == "EXAM" ? "selected" : "") + ">EXAM</option>";
  page += String("<option value='CUSTOM' ") + (currentMode == "CUSTOM" ? "selected" : "") + ">CUSTOM</option>";
  page += "</select>";
  for (int i = 0; i < 9; i++) {
    page += "<label>Bell Time " + String(i + 1) + "</label><input type='time' name='bell" + String(i) + "' value='" + customTimes[i] + "'>";
  }
  page += "<input type='submit' value='Apply'>";
  page += "</form><p>ESP32 Status: âœ… Connected</p></div></body></html>";
  return page;
}

// Show logo screen
void showAdScreen() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(10, 20);
  display.println("SA-TOWER");
  display.setTextSize(1);
  display.setCursor(35, 45);
  display.println("by SANJEY");
  display.display();
  delay(3000);
  lastAdMillis = millis();
}

// Get time as string
String getFormattedTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) return "00:00";
  char buf[6];
  strftime(buf, sizeof(buf), "%H:%M", &timeinfo);
  return String(buf);
}

// Ring the bell
void ringBell(int durationMs) {
  digitalWrite(relayPin, LOW);
  delay(durationMs);
  digitalWrite(relayPin, HIGH);
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(20, 20);
  display.setTextColor(WHITE);
  display.println(" BELL");
  display.display();
  delay(1000);
}

// Check if current time matches a bell time
void checkBellSchedule() {
  String currentTime = getFormattedTime();
  String times[9];
  int durations[9];

  if (currentMode == "CLASS") {
    String classTimes[9] = {"08:45", "09:35", "10:25", "10:45", "12:25", "13:25", "15:05", "15:25", "16:15"};
    int classDurations[9] = {3000, 3000, 6000, 3000, 6000, 3000, 6000, 3000, 6000};
    memcpy(times, classTimes, sizeof(times));
    memcpy(durations, classDurations, sizeof(durations));
  } else if (currentMode == "EXAM") {
    String examTimes[9] = {"09:30", "12:00", "12:30", "13:30", "14:15", "16:15", "00:00", "00:01", "00:02"};
    for (int i = 0; i < 9; i++) durations[i] = 3000;
    memcpy(times, examTimes, sizeof(times));
  } else if (currentMode == "CUSTOM") {
    memcpy(times, customTimes, sizeof(times));
    for (int i = 0; i < 9; i++) durations[i] = 3000;
  }

  for (int i = 0; i < 9; i++) {
    if (times[i] == currentTime && lastBell != currentTime) {
      ringBell(durations[i]);
      lastBell = currentTime;
    }
  }
}

// Update OLED display
void updateDisplay() {
  if (millis() - lastAdMillis >= 10000) showAdScreen();
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(5, 10);
  display.println("  " + getFormattedTime());
  display.setCursor(35, 45);
  display.setTextSize(1);
  display.println(currentMode);
  display.display();
}

// Display refresh after applying mode
void applyMode() {
  digitalWrite(relayPin, HIGH);
  updateDisplay();
}

// Web routes
void handleRoot() {
  server.send(200, "text/html", loginPage);
}

void handleLogin() {
  if (server.hasArg("pass") && server.arg("pass") == correctPassword)
    server.send(200, "text/html", generateModePage());
  else
    server.send(200, "text/html", "<h2>Wrong password</h2><a href='/'>Try Again</a>");
}

void handleSetMode() {
  if (server.hasArg("mode")) {
    currentMode = server.arg("mode");

    preferences.begin("settings", false);
    preferences.putString("mode", currentMode);

    for (int i = 0; i < 9; i++) {
      customTimes[i] = server.arg("bell" + String(i));
      preferences.putString(("bell" + String(i)).c_str(), customTimes[i]);
    }

    preferences.end();
    applyMode();
    server.send(200, "text/html", "<h2>Mode set to: " + currentMode + "</h2><a href='/'>Back</a>");
  }
}

// Setup everything
void setup() {
  Serial.begin(115200);
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, HIGH);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED init failed");
    while (true);
  }

  display.clearDisplay();
  display.display();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected: " + WiFi.localIP().toString());

  configTime(19800, 0, "pool.ntp.org", "time.nist.gov");

  preferences.begin("settings", false);
  currentMode = preferences.getString("mode", "CLASS");
  for (int i = 0; i < 9; i++) {
    customTimes[i] = preferences.getString(("bell" + String(i)).c_str(), "");
  }
  preferences.end();

  showAdScreen();
  applyMode();

  server.on("/", handleRoot);
  server.on("/login", HTTP_POST, handleLogin);
  server.on("/setmode", HTTP_POST, handleSetMode);
  server.begin();
}

// Loop execution
void loop() {
  server.handleClient();
  checkBellSchedule();
  updateDisplay();
  delay(1000);
}
